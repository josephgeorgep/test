#include <esp_now.h>
#include <WiFi.h>

// Define relay pins
#define RELAY_1_PIN 3
#define RELAY_2_PIN 10
#define RELAY_3_PIN 19
#define RELAY_4_PIN 5

// Define switch pins
#define SWITCH_1_PIN 2
#define SWITCH_2_PIN 6
#define SWITCH_3_PIN 4
#define SWITCH_4_PIN 18

// Structure to receive data
typedef struct {
  uint8_t relayNumber; // Relay number (1, 2, 3, or 4)
  uint8_t state;       // 0 = OFF, 1 = ON
} RelayCommand;

// Callback when data is received
void OnDataRecv(const uint8_t *mac, const uint8_t *incomingData, int len) {
  if (len == sizeof(RelayCommand)) {
    RelayCommand command;
    memcpy(&command, incomingData, sizeof(command));

    switch (command.relayNumber) {
      case 1:
        digitalWrite(RELAY_1_PIN, command.state);
        break;
      case 2:
        digitalWrite(RELAY_2_PIN, command.state);
        break;
      case 3:
        digitalWrite(RELAY_3_PIN, command.state);
        break;
      case 4:
        digitalWrite(RELAY_4_PIN, command.state);
        break;
      default:
        Serial.println("Invalid relay number!");
        break;
    }
  }
}

void setup() {
  Serial.begin(115200);

  pinMode(RELAY_1_PIN, OUTPUT);
  pinMode(RELAY_2_PIN, OUTPUT);
  pinMode(RELAY_3_PIN, OUTPUT);
  pinMode(RELAY_4_PIN, OUTPUT);
  digitalWrite(RELAY_1_PIN, LOW);
  digitalWrite(RELAY_2_PIN, LOW);
  digitalWrite(RELAY_3_PIN, LOW);
  digitalWrite(RELAY_4_PIN, LOW);

  pinMode(SWITCH_1_PIN, INPUT_PULLUP);
  pinMode(SWITCH_2_PIN, INPUT_PULLUP);
  pinMode(SWITCH_3_PIN, INPUT_PULLUP);
  pinMode(SWITCH_4_PIN, INPUT_PULLUP);

  WiFi.mode(WIFI_STA);
  if (esp_now_init() != ESP_OK) {
    Serial.println("Error initializing ESP-NOW");
    return;
  }
  esp_now_register_recv_cb(OnDataRecv);
}

void loop() {
  digitalWrite(RELAY_1_PIN, digitalRead(SWITCH_1_PIN));
  digitalWrite(RELAY_2_PIN, digitalRead(SWITCH_2_PIN));
  digitalWrite(RELAY_3_PIN, digitalRead(SWITCH_3_PIN));
  digitalWrite(RELAY_4_PIN, digitalRead(SWITCH_4_PIN));
}
